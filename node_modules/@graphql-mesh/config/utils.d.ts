import { KeyValueCache, YamlConfig, ImportFn, MeshPubSub, Logger } from '@graphql-mesh/types';
import { MeshStore } from '@graphql-mesh/store';
declare type ResolvedPackage<T> = {
    moduleName: string;
    resolved: T;
};
interface GetPackageOptions {
    name: string;
    type: string;
    importFn: ImportFn;
    cwd: string;
}
export declare function getPackage<T>({ name, type, importFn, cwd }: GetPackageOptions): Promise<ResolvedPackage<T>>;
export declare function resolveAdditionalTypeDefs(baseDir: string, additionalTypeDefs: string): Promise<import("graphql").DocumentNode[]>;
export declare function resolveCache(cacheConfig: YamlConfig.Config['cache'], importFn: ImportFn, rootStore: MeshStore, cwd: string, pubsub: MeshPubSub): Promise<{
    cache: KeyValueCache;
    importCode: string;
    code: string;
}>;
export declare function resolvePubSub(pubsubYamlConfig: YamlConfig.Config['pubsub'], importFn: ImportFn, cwd: string): Promise<{
    importCode: string;
    code: string;
    pubsub: MeshPubSub;
}>;
export declare function resolveDocuments(documentsConfig: YamlConfig.Config['documents'], cwd: string): Promise<import("@graphql-tools/utils").Source[]>;
export declare function resolveLogger(loggerConfig: YamlConfig.Config['logger'], importFn: ImportFn, cwd: string): Promise<{
    importCode: string;
    code: string;
    logger: Logger;
}>;
export {};
